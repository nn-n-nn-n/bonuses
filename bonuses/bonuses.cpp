// MazeGame.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <conio.h>
#include "time.h"
#include "windows.h"
#include "CrtLib.h"

using namespace std;
using namespace crt;

const int LX = 75;
const int LY = 30;

const char player = (char)1;
// 0 - пустое пространство
// 1 - стена
// 2 - выход
// 3 - игрок
// 4 - монета
// 5 - алмаз
// 6 - время

int maze[LY][LX] = {
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,0,1,1,1,4,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1},
{1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1},
{1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,4,0,0,0,0,0,0,1,4,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1},
{1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1},
{1,0,1,1,1,1,1,5,1,1,1,1,1,1,0,1,4,0,0,0,1,1,1,1,6,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1},
{1,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,5,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,4,1},
{1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,4,1},
{1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,4,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1},
{1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,6,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,0,4,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1},
{1,1,1,1,4,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,4,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,4,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
{1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,4,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2},
{1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1},
{1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,4,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1},
{1,1,5,1,1,1,0,1,1,1,1,1,4,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1},
{1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,4,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,4,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1},
{1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1},
{1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,4,0,1,1,1,1,1,1,0,1},
{1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,5,1,1,0,1},
{1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,5,1,1,1,1,0,1,1,0,1,1,1,4,4,1,0,1},
{1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,4,4,4,0,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};

// глобальные переменные
int hx, hy; // позиция игрока в лабиринте
int score = 0; // счет игры

int gameState = 0; // 0 - игра продолжается, 1 - выигрыш, 2 - закончилось время
int timeLimit = 300; // лимит игры в секундах
int gameTime; // оставшееся время

clock_t tstart; // значение счетчика таймера при старте игры

// Функция обновляет текущий счет на экране
void UpdateScore(int score)
{
	GotoXY(35, 30); // ставим курсор на последнюю строку консоли
	setlocale(LC_ALL, "ru-RU"); // включаем локаль, ориентированную на кириллицу
	SetTextColor(11);
	cout << "СЧЕТ: " << score; // выводим счет на экран
	setlocale(LC_ALL, "C"); // возвращаем настройки локали по умолчанию
}

// Функция обновляет оставшееся время до окончания игры
// параметр t функции - это текущее значение системного таймера, на момент вызова функции
void UpdateClock(clock_t t)
{
	gameTime = timeLimit - (t - tstart) / CLOCKS_PER_SEC; /* вычисляем оставшееся время в секундах
	и помещаем результат в gameTime. (t-tstart) - кол-во миллисекунд, прошедшее
	с момента старта игры. CLOCKS_PER_SEC - константа, определяющая количество
	изменений системного таймера за 1 секунду. Для Windows это значение
	равно 1000. Вычитая из timeLimit время, прошедшее с начала игры, мы вычисляем
	остаток времени в секундах */
	setlocale(LC_ALL, "ru-RU"); // переключаем локаль
	if (gameTime < 0) // проверяем, закончилось ли время
	{
		gameState = 2; // если да, то обновляем статус игры на 2 - игрок ПРОИГРАЛ
	}
	else
	{ // если время осталось
		if (gameTime > 15)
			SetTextColor(10);
		else
			SetTextColor(12);
		GotoXY(49, 30); // ставим курсор на последнюю строку
		cout << "Осталось: " << gameTime << " секунд "; // выводим остаток времени в консоль
	}
	setlocale(LC_ALL, "C"); // восстанавливаем настройки локали
}

// Функция печатает в консоли лабиринт
void PrintMaze(int maze[LY][LX], int sizeX, int sizeY)
{
	for (int i = 0; i < sizeY; i++)
	{
		for (int j = 0; j < sizeX; j++)
		{
			switch (maze[i][j])
			{
			case 0:
				cout << ' ';
				break;
			case 1:
				SetTextColor(12);
				cout << (char)178;
				break;
			case 2:
				SetTextColor(8);
				cout << (char)176;
				break;
			case 3:
				SetTextColor(15);
				cout << player;
				break;
			case 4:
				SetTextColor(14);
				cout << '$';
				break;
			case 5:
				SetTextColor(11);
				cout << (char)4;
				break;
			case 6:
				SetTextColor(9);
				cout << (char)30;
				break;
			default:
				cout << '?';
			}
		}
		cout << endl;
	}
}

// Функция определяет позицию игрока в массиве, обновляя значения глобальных переменных hx и hy
bool FindFirstPlayerPosition(int maze[LY][LX], int sizeX, int sizeY)
{
	int OnePlayer = 0;
	int door = 0;
	for (int i = 0; i < sizeY; i++) // цикл пробегает массив по строкам
	{
		for (int j = 0; j < sizeX; j++) // цикл пробегает массив по столбцам
		{
			if (maze[i][j] == 3)
			{
				OnePlayer++;
				hx = j;
				hy = i;
			}

			if (maze[i][j] == 2)
			{
				door++;
			}
		}

	}
	if (OnePlayer == 1 && door >= 1)
		return true;
	else
		return false;
}

//Функция скрывает игрока с экрана и убирает его из лабиринта
void HidePlayer()
{
	maze[hy][hx] = 0; // записываем в текущую позицию матрицы число 0
	GotoXY(hx, hy); // устанавливаем курсор в позицию игрока в консоль
	cout << ' '; // и печатаем пробел
}

// функция показывает на экране игрока и записывает его в лабиринт
void ShowPlayer()
{
	SetTextColor(15);
	maze[hy][hx] = 3; // записываем в текущую позицию матрицы число 3
	GotoXY(hx, hy); // устанавливаем курсор в позицию игрока в консоль
	cout << player; // и печатаем образ игрока
}

void MovePlayer(int dx, int dy)
{
	if (hx + dx < LX && hy + dy < LY && hx + dx >= 0 && hy + dy >= 0)
	{
		switch (maze[hy + dy][hx + dx])
		{
		case 0:
			HidePlayer();
			hy += dy;
			hx += dx;
			ShowPlayer();
			break;
		case 2:
			HidePlayer();
			hy += dy;
			hx += dx;
			ShowPlayer();
			UpdateScore(score += 500);
			gameState = 1;
			break;
		case 4:
			HidePlayer();
			hy += dy;
			hx += dx;
			ShowPlayer();
			UpdateScore(score += 100);
			break;
		case 5:
			HidePlayer();
			hy += dy;
			hx += dx;
			ShowPlayer();
			UpdateScore(score += 300);
			break;
		case 6:
			HidePlayer();
			hy += dy;
			hx += dx;
			ShowPlayer();
			UpdateClock(timeLimit += 10);
			break;
		}
	}
}

void ShowGameOverMessage()
{
	setlocale(LC_ALL, "ru-RU");
	if (gameState == 1)
	{
		SetTextColor(10);
		cout << endl;
		GotoXY(10, LY);
		cout << "Поздравляю, вы прошли лабиринт! Вы набрали " << score << " очков!";
	}

	else if (gameState == 2)
	{
		SetTextColor(12);
		cout << endl;
		GotoXY(15, LY);
		cout << "Вы не успели пройти лабиринт. Попробуйте ещё раз.";
	}
	_getch();
}

// Функция обрабатывает события клавиатуры и управляет игрой
void Control()
{
	tstart = clock(); // запоминаем счетчик системного таймера в момент старта игры.
	UpdateScore(score); // обновляем счет игры, изначально он нулевой
	unsigned char x; // это переменная хранит символ, соответствующий нажатой клавише
	while (gameState == 0) // цикл игры - пока gameState == 0, игра идет
	{
		UpdateClock(clock()); // обновляем оставшееся время
		if (_kbhit()) // если была нажата клавиша - то обрабатываем ее, иначе следующая
		{ // итерация игрового цикла
			x = _getch(); // считываем символ нажатой клавиш,
			if (x == 27) return;// если это символ Esc (27) то это выход из игры
			if (x == 0xe0) // если это символ с кодом 0xE0 (шестнадцатеричное)
				switch (_getch()) // то считываем еще один символ (некоторые клавиши выдают двойные коды)
				{
				case 72: // если 2-й символ код 72, то это клавиша курсор вверх
					MovePlayer(0, -1); // идем вверх
					break;
				case 80: // если 2-й символ код 80, то это клавиша курсор вниз
					MovePlayer(0, 1); // идем вниз
					break;
				case 75: // если 2-й символ код 75, то это клавиша курсор влево
					MovePlayer(-1, 0); // идем влево
					break;
				case 77:
					MovePlayer(1, 0); // если 2 - й символ код 77, то это клавиша курсор вправо
					break; // идем вправо
				}
		}
		Sleep(200);
	}
	ShowGameOverMessage();
}

// Функция main, которая выполняется при запуске программы
int main()
{
	system("mode con cols=80 lines=31");
	system("cls");
	PrintMaze(maze, LX, LY);
	if (!FindFirstPlayerPosition(maze, LX, LY))
	{
		gameState = 2;
		setlocale(LC_ALL, "ru-RU");
		cout << "Не валидный лабиринт";
	}
	HideCursor();
	Control();
	ShowCursor();
}